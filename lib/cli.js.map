{"version":3,"sources":["../src/cli.js"],"names":[],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAM,SAAS,gBAAW,SAAX;;;;;;AAMf,IAAM,UAAU,SAAV,OAAU;;CAAV;;;;;AAKN,IAAM,YAAY,SAAZ,SAAY;SAChB;sCAAI;;;;WACF,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV;aACV,uCAAM,KAAK,MAAL,CAAY,UAAC,GAAD;2CAAS;;;;eACzB,MAAM,OAAO,GAAP,CAAN,GAAoB,yBAAW,IAAX,CAApB;OADgB,EAAlB;KADU;GADd;CADgB;;;;;AASlB,IAAM,QAAU,SAAV,KAAU,CAAC,CAAD,EAAO;AACrB,UAAQ,GAAR,CAAY,EAAE,KAAF,GAAU,EAAE,KAAF,GAAU,CAApB,CAAZ,CADqB;CAAP;;;;;;;AAShB,IAAM,QAAU,UAAU,aAAG,SAAH,CAApB;AACN,IAAM,OAAU,UAAU,aAAG,QAAH,CAApB;AACN,IAAM,SAAU,UAAU,UAAC,IAAD,EAAO,EAAP;SAAc,aAAG,MAAH,CAAU,IAAV,EAAgB,aAAG,IAAH,GAAU,aAAG,IAAH,EAAS,EAAnC;CAAd,CAApB;;;;;;AAMN,IAAM,SAAS,SAAT,MAAS,CAAC,KAAD,QAA4B;MAAlB,eAAkB;MAAb,qBAAa;;AACzC,SAAO,KAAP,EACG,IADH,CACQ;WAAW,KAAK,KAAL;GAAX,CADR,CAEG,IAFH,CAEQ;WAAW,OAAO,KAAK,QAAL,EAAP;GAAX,CAFR,CAGG,IAHH,CAGQ;WAAW,MAAM,0BAAO,IAAP,CAAN,GAAqB,IAArB;GAAX,CAHR,CAIG,IAJH,CAIQ;WAAW,MAAM,MAAN,EAAc,MAAd;GAAX,CAJR,CAKG,KALH,CAKS,KALT,EADyC;CAA5B;;;;;AAYf,IAAM,QAAQ,SAAR,KAAQ,CAAC,KAAD,EAAQ,OAAR;SACZ,aAAG,KAAH,CAAS,KAAT,EAAgB;WACd,OAAO,KAAP,EAAc,OAAd;GADc;CADJ;;AAId,IAAM,aAAa,SAAb,UAAa;SAAQ,KAAK,MAAL,CAAY,CAAZ,EAAe,WAAf,KAA+B,KAAK,KAAL,CAAW,CAAX,EAAc,WAAd,GAA4B,OAA5B,CAAoC,IAApC,EAA0C,EAA1C,CAA/B;CAAR;;;;;AAKnB,IAAM,kBAAkB,SAAlB,eAAkB,CAAC,IAAD,EAAO,MAAP,EAAkB;AACxC,MAAM,YAAY,KAAK,WAAL,EAAZ,CADkC;;AAGxC,+QAgBc,6DAGC,oOAYT,yRAYgB,2CAAsC,8SAoB3C,qBAAe,QAAO,SAAS,QAAT,GAAoB,EAApB,2BACxB,WAhEf,CAHwC;CAAlB;;;;;AA0ExB,IAAM,gBAAgB,SAAhB,aAAgB,CAAC,IAAD,EAAO,MAAP;SACpB,aAAW,WAAW,IAAX,SAAX,EAAkC,gBAAgB,WAAW,IAAX,CAAhB,EAAkC,MAAlC,CAAlC,EACG,IADH,CACQ;WAAM,QAAQ,GAAR,yBAAkC,WAAW,IAAX,CAAlC;GAAN;CAFY;;AAItB,OAAO,OAAP,GAAiB;AACf,iBAAe,aAAf;AACA,UAAQ,MAAR;AACA,SAAO,KAAP;AACA,WAAS,OAAT;CAJF","file":"cli.js","sourcesContent":["import fs                      from 'fs'\r\nimport minify                  from 'html-minify'\r\nimport mjmlEngine              from './index'\r\nimport { version as VERSION }  from '../package.json'\r\n\r\nconst engine = mjmlEngine.mjml2html\r\n\r\n/*\r\n * The version number is the NPM\r\n * version number. It should be the same as the MJML engine\r\n */\r\nconst version = () => VERSION\r\n\r\n/*\r\n * Turns a callback style to a Promise style one\r\n */\r\nconst promisify = fn =>\r\n  (...args) =>\r\n    new Promise((resolve, reject) =>\r\n      fn(...args.concat((err, ...data) =>\r\n        err ? reject(err) : resolve(...data))))\r\n\r\n/*\r\n * Minimal Error Handling\r\n */\r\nconst error   = (e) => {\r\n  console.log(e.stack ? e.stack : e)\r\n}\r\n\r\n/*\r\n * Utility functions\r\n * write: write to a file\r\n * read: read a fileexists: ensure the file exists\r\n */\r\nconst write   = promisify(fs.writeFile)\r\nconst read    = promisify(fs.readFile)\r\nconst exists  = promisify((file, cb) => fs.access(file, fs.R_OK | fs.W_OK, cb))\r\n\r\n/*\r\n * Turns an MJML input file into a pretty HTML file\r\n * min: boolean that specify the output format (pretty/minified)\r\n */\r\nconst render = (input, { min, output }) => {\r\n  exists(input)\r\n    .then(()      => read(input))\r\n    .then(mjml    => engine(mjml.toString()))\r\n    .then(html    => min ? minify(html) : html)\r\n    .then(result  => write(output, result))\r\n    .catch(error)\r\n}\r\n\r\n/*\r\n * Watch changes on a specific input file by calling render on each change\r\n */\r\nconst watch = (input, options) =>\r\n  fs.watch(input, () =>\r\n    render(input, options))\r\n\r\nconst capitalize = name => name.charAt(0).toUpperCase() + name.slice(1).toLowerCase().replace(/-/g, '')\r\n\r\n/*\r\n* Return the code of an MJML component for a given name\r\n*/\r\nconst createComponent = (name, ending) => {\r\n  const lowerName = name.toLowerCase()\r\n\r\n  return `\r\nimport React, { Component } from 'react'\r\nimport _ from 'loadash'\r\nimport {\r\n  MJMLColumnElement,\r\n  elements,\r\n  registerElement,\r\n} from 'mjml'\r\n\r\n/*\r\n * Wrap your dependencies here.\r\n */\r\nconst {\r\n  text: MjText,\r\n} = elements;\r\n\r\nconst NAME = '${lowerName}'\r\n\r\n@MJMLColumnElement({\r\n  tagName: 'mj-${lowerName}',\r\n  content: ' ',\r\n\r\n  /*\r\n   * These are your default css attributes\r\n   */\r\n  attributes: {\r\n    'color': '#424242',\r\n    'font-family': 'Helvetica',\r\n    'margin-top': '10px'\r\n  }\r\n})\r\nclass ${name} extends Component {\r\n\r\n  /*\r\n   * Build your styling here\r\n   */\r\n  getStyles() {\r\n    const { mjAttribute, color } = this.props\r\n\r\n    return _.merge({}, this.constructor.baseStyles, {\r\n      text: {\r\n      /*\r\n       * Get the color attribute\r\n       * Example: <mj-${lowerName} color=\"blue\">content</mj-${lowerName}>\r\n       */\r\n        color: mjAttribute('color')\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    const css = this.getStyles(),\r\n          content = 'Hello World!'\r\n\r\n    return (\r\n      <MjText style={ css }>\r\n        { content }\r\n      </MjText>\r\n    )\r\n  }\r\n}\r\n\r\nregisterElement('${lowerName}', ${name}${ending ? ', true' : ''})\r\nexport default ${name}\r\n`\r\n}\r\n\r\n/*\r\n * Create a new component based on the default template\r\n */\r\nconst initComponent = (name, ending) =>\r\n  write(`./${capitalize(name)}.js`, createComponent(capitalize(name), ending))\r\n    .then(() => console.log(`Component created: ${capitalize(name)}`))\r\n\r\nmodule.exports = {\r\n  initComponent: initComponent,\r\n  render: render,\r\n  watch: watch,\r\n  version: version\r\n}\r\n"]}