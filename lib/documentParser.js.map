{"version":3,"sources":["../src/documentParser.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAM,YAAY;;;;;AAIhB,gDAAkB,MAAM;AACtB,QAAI,CAAC,IAAD,EAAO;AACT,YAAM,4BAAqB,yCAArB,CAAN,CADS;KAAX;;AAIA,QAAM,OAAO,UAAU,iBAAV,CALS;AAMtB,QAAM,UAAU,KAAK,OAAL,CANM;AAOtB,QAAM,aAAa,KAAK,OAAL,CAPG;AAQtB,QAAI,gBAAJ,CARsB;;AAUtB,QAAM,WAAW,KAAK,UAAL,GACT,KAAK,UAAL,CAAgB,MAAhB,CAAuB;aAAS,MAAM,OAAN;KAAT,CAAvB,CAA+C,GAA/C,CAAmD,IAAnD,CADS,GACkD,EADlD,CAVK;;AAatB,QAAI,mCAAW,OAAX,CAAmB,OAAnB,KAA+B,CAAC,CAAD,EAAI;AACrC,UAAM,IAAI,kBAAQ,IAAR,CAAa,IAAb,EAAmB,EAAE,SAAS,IAAT,EAAe,gBAAgB,KAAhB,EAApC,CAAJ,CAD+B;AAErC,gBAAU,EAAE,OAAF,EAAW,IAAX,GAAkB,IAAlB,EAAV,CAFqC;KAAvC;;AAKA,WAAO,EAAE,gBAAF,EAAW,sBAAX,EAAuB,kBAAvB,EAAiC,gBAAjC,EAAP,CAlBsB;GAJR;;;;;;;;;AA+BhB,0CAAe,SAAS;AACtB,QAAI,UAAJ;QAAO,aAAP,CADsB;AAEtB,QAAI;AACF,UAAI,kBAAQ,IAAR,CAAa,OAAb,EAAsB,EAAE,SAAS,IAAT,EAAxB,CAAJ,CADE;AAEF,aAAO,EAAE,SAAF,CAAP,CAFE;KAAJ,CAGE,OAAO,CAAP,EAAU;AACV,YAAM,sBAAe,8BAAf,CAAN,CADU;KAAV;;AAIF,QAAI,CAAC,IAAD,EAAO;AACT,YAAM,0BAAmB,8BAAnB,CAAN,CADS;KAAX;;AAIA,WAAO,UAAU,iBAAV,CAA4B,KAAK,GAAL,CAAS,CAAT,CAA5B,CAAP,CAbsB;GA/BR;CAAZ;;kBAgDS,UAAU,cAAV","file":"documentParser.js","sourcesContent":["import cheerio from \"cheerio\"\r\nimport { endingTags } from './MJMLElementsCollection'\r\nimport { ParseError, EmptyMJMLError, NullElementError } from './Error'\r\n\r\nconst internals = {\r\n  /**\r\n   * converts MJML body into a JSON representation\r\n   */\r\n  mjmlElementParser(elem) {\r\n    if (!elem) {\r\n      throw new NullElementError('Null element found in mjmlElementParser')\r\n    }\r\n\r\n    const that = internals.mjmlElementParser\r\n    const tagName = elem.tagName\r\n    const attributes = elem.attribs\r\n    let content\r\n\r\n    const children = elem.childNodes ?\r\n            elem.childNodes.filter(child => child.tagName).map(that) : []\r\n\r\n    if (endingTags.indexOf(tagName) != -1) {\r\n      const $ = cheerio.load(elem, { xmlMode: true, decodeEntities: false })\r\n      content = $(tagName).html().trim()\r\n    }\r\n\r\n    return { tagName, attributes, children, content }\r\n  },\r\n\r\n  /**\r\n   * Import an html document containing some mjml\r\n   * returns JSON\r\n   *   - container: the mjml container\r\n   *   - mjml: a json representation of the mjml\r\n   */\r\n  documentParser(content) {\r\n    let $, body;\r\n    try {\r\n      $ = cheerio.load(content, { xmlMode: true })\r\n      body = $('mj-body')\r\n    } catch (e) {\r\n      throw new ParseError('Error while parsing the file')\r\n    }\r\n\r\n    if (!body) {\r\n      throw new EmptyMJMLError('No mj-body found in the file')\r\n    }\r\n\r\n    return internals.mjmlElementParser(body.get(0))\r\n  }\r\n};\r\n\r\nexport default internals.documentParser\r\n"]}