{"version":3,"sources":["../src/Error.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAIA,IAAM,QAAQ,SAAR,KAAQ,CAAC,IAAD,EAAO,IAAP,EAAgB;;AAE5B;cAAa;;AAEX,aAFW,SAEX,CAAa,OAAb,EAAsB;4BAFX,WAEW;;yEAFX,uCAGY,cAAS,UADV;;AAEpB,YAAK,MAAL,GAAc,IAAd,CAFoB;;KAAtB;;WAFW;IAAkB,MAA/B,CAF4B;CAAhB;;;;;;AAed,IAAM,UAAU,SAAV,OAAU,CAAC,IAAD,EAAU;AACxB,SAAO,UAAC,OAAD,EAAa;AAClB,YAAQ,KAAR,oBAA+B,cAAS,OAAxC,EADkB;GAAb,CADiB;CAAV;;;;;;AAUT,IAAM,kCAAa,MAAM,YAAN,EAAoB,CAApB,CAAb;;;;;AAKN,IAAM,0CAAiB,MAAM,gBAAN,EAAwB,CAAxB,CAAjB;;;;;AAKN,IAAM,8CAAmB,MAAM,gBAAN,EAAwB,CAAxB,CAAnB;;;;;AAKN,IAAM,kDAAqB,MAAM,oBAAN,EAA4B,CAA5B,CAArB","file":"Error.js","sourcesContent":["\r\n/*\r\n * Create a custom Error class\r\n */\r\nconst error = (name, code) => {\r\n\r\n  return class MJMLError extends Error {\r\n\r\n    constructor (message) {\r\n      super(`[MJMLError] ${name}: ${message}`)\r\n      this.status = code\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n * Warnings are printed to stderr\r\n */\r\n/* eslint-disable no-unused-vars */\r\nconst warning = (name) => {\r\n  return (message) => {\r\n    console.error(`[MJMLWarning] ${name}: ${message}`)\r\n  }\r\n}\r\n/* eslint-enable no-unused-vars */\r\n\r\n/*\r\n * Error while parsing the code with cheerio\r\n */\r\nexport const ParseError = error('ParseError', 1)\r\n\r\n/*\r\n * Error when encounter an empty MJML Element that should be filled\r\n */\r\nexport const EmptyMJMLError = error('EmptyMJMLError', 2)\r\n\r\n/*\r\n * Triggered when an MJML is anormally null/udefined\r\n */\r\nexport const NullElementError = error('EmptyMJMLError', 3)\r\n\r\n/*\r\n * When encounter an unknown MJML Element while transpiling\r\n */\r\nexport const UnknownMJMLElement = error('UnknownMJMLElement', 5)\r\n\r\n/*\r\n * TODO: Warnings\r\n */\r\n"]}