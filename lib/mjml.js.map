{"version":3,"sources":["../src/mjml.js"],"names":[],"mappings":";;AAEA;;;;AACA;;;;AACA;;;;;;;;;AAKA,IAAM,OAAO,SAAP,IAAO,GAAM;;;;AAIjB,sBACG,OADH,CACW,cAAQ,OAAR,EADX,EAJiB;;AAOjB,sBACG,MADH,CACU,qBADV,EACiC,uBADjC,EAEG,MAFH,CAEU,oBAFV,EAEgC,+BAFhC,EAGG,MAHH,CAGU,qBAHV,EAGiC,6BAHjC,EAGgE,QAHhE,EAIG,MAJH,CAIU,WAJV,EAIuB,8BAJvB,EAIuD,OAJvD,EAKG,MALH,CAKU,cALV,EAK0B,6DAL1B,EAMG,MANH,CAMU,mBANV,EAM+B,2DAN/B,EAOG,MAPH,CAOU,yBAPV,EAOqC,8BAPrC,EAPiB;;AAgBjB,sBAAO,KAAP,CAAa,QAAQ,IAAR,CAAb,CAhBiB;;AAkBjB,UAAQ,IAAR;AACE,SAAM,CAAC,CAAC,oBAAO,KAAP;AAAoB,aAAO,cAAQ,KAAR,CAAc,oBAAO,KAAP,qBAAd,CAAP,CAA5B;AADF,SAEQ,CAAC,CAAC,oBAAO,MAAP;AAAoB,aAAO,cAAQ,MAAR,CAAe,oBAAO,MAAP,qBAAf,CAAP,CAA5B;AAFF,SAGQ,CAAC,CAAC,oBAAO,QAAP;AAAoB,cAAQ,KAAR,CAAc,kEAAd,EAA5B,OAAsH,QAAQ,IAAR,CAAa,CAAb,CAAP,CAA/G;AAHF,SAIQ,CAAC,CAAC,oBAAO,aAAP;AAAyB,aAAO,cAAQ,aAAR,CAAsB,oBAAO,aAAP,EAAsB,oBAAO,MAAP,EAAe,KAA3D,CAAP,CAAjC;AAJF;AAK8B,aAAO,QAAQ,GAAR,CAAY,cAAQ,OAAR,EAAZ,CAAP,CAA5B;AALF,GAlBiB;CAAN;;;;;;AA+Bb,OAAO,OAAP;;AAEA,IAAI,QAAQ,IAAR,KAAiB,MAAjB,EAAyB;AAC3B,SAD2B;CAA7B","file":"mjml.js","sourcesContent":["\r\n\r\nimport binary                  from 'commander'\r\nimport mjmlEngine              from './index'\r\nimport mjmlCLI                 from './cli'\r\n\r\n/*\r\n * If require.main\r\n */\r\nconst main = () => {\r\n  /*\r\n   * Parse the command line arguments\r\n   */\r\n  binary\r\n    .version(mjmlCLI.version())\r\n\r\n  binary\r\n    .option('-r, --render <file>', 'Compiles an MJML file')\r\n    .option('-w, --watch <file>', 'Watch and render an MJML file')\r\n    .option('-o, --output <file>', 'Redirect the HTML to a file', 'a.html')\r\n    .option('-m, --min', 'Minify the final output file', 'false')\r\n    .option('-e, --ending', 'Specifies that the newly created component is an ending tag')\r\n    .option('--register <name>', 'Initialize a self-registering MJML component (deprecated)')\r\n    .option('--init-component <name>', 'Initialize an MJML component')\r\n\r\n  binary.parse(process.argv)\r\n\r\n  switch (true) {\r\n    case (!!binary.watch)     : return mjmlCLI.watch(binary.watch, binary)\r\n    case (!!binary.render)    : return mjmlCLI.render(binary.render, binary)\r\n    case (!!binary.register)  : console.error(\"--register option is deprecated, please now use --init-component\"); return process.exit(1)\r\n    case (!!binary.initComponent)  : return mjmlCLI.initComponent(binary.initComponent, binary.ending, false)\r\n    default                   : return console.log(mjmlCLI.version())\r\n  }\r\n}\r\n\r\n/*\r\n * Importing this library in your project will\r\n * give you the MJML engine\r\n */\r\nmodule.exports = mjmlEngine\r\n\r\nif (require.main === module) {\r\n  main()\r\n}\r\n"]}